"""Aplica√ß√£o principal MDA Precifica√ß√£o de √Åreas."""

import streamlit as st
import numpy as np
from mda_app.config.settings import APP_CONFIG
from mda_app.core.data_loader import carregar_dados, processar_dados_geograficos
from mda_app.components.ui_components import render_header, render_metrics
from mda_app.components.visualizations import criar_mapa, criar_histograma, criar_scatter_plot
from mda_app.utils.formatters import reais


def configurar_pagina():
    """Configurar p√°gina do Streamlit."""
    st.set_page_config(
        layout=APP_CONFIG["layout"],
        page_title=APP_CONFIG["page_title"],
        page_icon=APP_CONFIG["page_icon"]
    )


def configurar_sidebar_styles():
    """Configurar estilos da sidebar."""
    st.markdown("""
        <style>
        [data-testid="stSidebar"] {
            background-color: #E5E5E5;
        }
        div[data-baseweb="select"] span {
            color: #006199;
            font-weight: 500;
        }
        .st-c1 {
            background-color:#E5E5E5;
        }
        div[data-baseweb="slider"] > div > div {
            background-color: black !important;
        }
        </style>
        """, unsafe_allow_html=True)


def criar_filtros_sidebar(gdf):
    """Criar filtros na sidebar."""
    # Filtro de UF
    ufs = gdf["SIGLA_UF"].unique()
    uf_sel = st.sidebar.multiselect("Sele√ß√£o de Estado (UF)", options=ufs, default=list(ufs))
    
    # Filtro de Munic√≠pios (baseado nas UFs selecionadas)
    if uf_sel:
        # Filtrar munic√≠pios apenas das UFs selecionadas
        gdf_filtrado_uf = gdf[gdf["SIGLA_UF"].isin(uf_sel)]
        # Usar mun_nome se dispon√≠vel, sen√£o NM_MUN
        if 'mun_nome' in gdf_filtrado_uf.columns:
            municipios = sorted(gdf_filtrado_uf["mun_nome"].unique())
        else:
            municipios = sorted(gdf_filtrado_uf["NM_MUN"].unique())
        
        # Verificar se h√° munic√≠pio selecionado via clique no mapa
        default_municipios = []
        if 'municipio_selecionado_mapa' in st.session_state and st.session_state.municipio_selecionado_mapa:
            if st.session_state.municipio_selecionado_mapa in municipios:
                default_municipios = [st.session_state.municipio_selecionado_mapa]
                # Limpar session_state ap√≥s usar
                st.session_state.municipio_selecionado_mapa = None
        
        # Multiselect com placeholder "Todos"
        municipios_sel = st.sidebar.multiselect(
            "Filtro de Munic√≠pios",
            options=municipios,
            default=default_municipios,
            placeholder="Todos os munic√≠pios",
            help="Deixe vazio para mostrar todos, ou selecione um ou mais munic√≠pios espec√≠ficos"
        )
        
        # Se nenhum munic√≠pio selecionado, usar todos
        if not municipios_sel:
            municipios_sel = municipios
    else:
        municipios_sel = []
    
    # Crit√©rios dispon√≠veis
    criterios_labels = {
        "valor_medio": "Valor M√©dio",
        "valor_mun_perim": "Valor por Per√≠metro", 
        "valor_mun_area": "Valor por √Årea",
        "nota_media": "Nota M√©dia",
        "nota_veg": "Vegeta√ß√£o",
        "nota_area": "√Årea M√©dia dos Lotes CAR",
        "nota_relevo": "Relevo",
        "nota_insalub": "Insalubridade (Dengue)",
        "nota_insalub_2": "Insalubridade Ajustada",
        "nota_total_q1": "Precipita√ß√£o - Trimestre 1",
        "nota_total_q2": "Precipita√ß√£o - Trimestre 2", 
        "nota_total_q3": "Precipita√ß√£o - Trimestre 3",
        "nota_total_q4": "Precipita√ß√£o - Trimestre 4",
    }
    criterio_explicacao = {
        "valor_medio": "M√©dia entre valor por per√≠metro e valor por √°rea.",
        "nota_veg": "Nota relativa √† vegeta√ß√£o do local. Calculada de acordo com a classe predominante no munic√≠pio (aberta, intermedi√°ria e fechada) e m√©dia de ocorr√™ncia de classe no intervalo.",
        "nota_area": "Nota relativa √† √°rea m√©dia de lotes CAR na √°rea do munic√≠pio. Acima de 35ha, entre 15 e 35ha, at√© 15ha, conforme m√°ximas e m√≠nimas.",
        "nota_relevo": "Nota relativa ao relevo predominante no munic√≠pio.",
        "nota_insalub": "Nota relativa √† insalubridade (casos de dengue por munic√≠pio). Distribu√≠da conforme m√°ximos e m√≠nimos gerais.",
        "nota_insalub_2": "Nota relativa √† insalubridade ajustada, incluindo incid√™ncia de ataques de animais pe√ßonhentos.",
        "valor_mun_perim": "Valor total do munic√≠pio em rela√ß√£o ao per√≠metro total de im√≥veis CAR, utilizando dados do Quadro II da Tabela de Rendimento e Pre√ßo do Anexo I da INSTRU√á√ÉO NORMATIVA SEI/INCRA.",
        "valor_mun_area": "Valor total do munic√≠pio em rela√ß√£o √† √°rea georreferenci√°vel.",
        "nota_media": "M√©dia das notas utilizada para composi√ß√£o do valor final.",
        "nota_total_q1": "Nota total somada para o trimestre 1",
        "nota_total_q2": "Nota total somada para o trimestre 2",
        "nota_total_q3": "Nota total somada para o trimestre 3", 
        "nota_total_q4": "Nota total somada para o trimestre 4"
    }
    
    # Sele√ß√£o de crit√©rio
    criterio_sel = st.sidebar.selectbox(
        "Selecione o crit√©rio para visualiza√ß√£o", 
        options=list(criterio_explicacao.keys()),
        index=list(criterio_explicacao.keys()).index("nota_media")
    )
    
    # Slider do crit√©rio selecionado
    crit_min, crit_max = float(gdf[criterio_sel].min()), float(gdf[criterio_sel].max())
    crit_sel = st.sidebar.slider(
        f"{criterios_labels[criterio_sel]}", 
        crit_min, crit_max, 
        (crit_min, crit_max)
    )
    
    return uf_sel, municipios_sel, criterio_sel, crit_sel, criterios_labels, criterio_explicacao


def aplicar_filtros(gdf, uf_sel, municipios_sel, criterio_sel, crit_sel):
    """Aplicar filtros aos dados."""
    # Determinar qual coluna de nome usar
    coluna_nome = 'mun_nome' if 'mun_nome' in gdf.columns else 'NM_MUN'
    
    filtros = (
        gdf["SIGLA_UF"].isin(uf_sel) &
        gdf[coluna_nome].isin(municipios_sel) &
        gdf[criterio_sel].between(*crit_sel)
    )
    return gdf[filtros]


def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    configurar_pagina()
    configurar_sidebar_styles()
    
    # Renderizar cabe√ßalho
    render_header()
    
    # Carregar e processar dados
    gdf = carregar_dados()
    gdf = processar_dados_geograficos(gdf)
    
    # Criar filtros
    uf_sel, municipios_sel, criterio_sel, crit_sel, criterios_labels, criterio_explicacao = criar_filtros_sidebar(gdf)
    
    # Aplicar filtros
    gdf_filtrado = aplicar_filtros(gdf, uf_sel, municipios_sel, criterio_sel, crit_sel)
    
    # Verificar se h√° dados ap√≥s aplicar filtros
    if len(gdf_filtrado) == 0:
        st.warning("‚ö†Ô∏è Nenhum munic√≠pio encontrado com os filtros selecionados. Por favor, ajuste os filtros.")
        st.stop()
    
    gdf_filtrado2 = gdf_filtrado.to_crs(epsg=5880)
    
    # Criar abas
    abas = st.tabs(["üåç Mapa", "üìå Introdu√ß√£o"])
    
    # Aba Introdu√ß√£o (√≠ndice 1)
    with abas[1]:
        st.title("‚Ä¢ Introdu√ß√£o")
        st.markdown("""
<p style="text-align: justify;">
"A partir do trabalho de elabora√ß√£o e estabiliza√ß√£o metodol√≥gica para o c√°lculo de estimativa de √°reas a georreferenciar nos munic√≠pios do acordo judicial do desastre de Mariana, se faz necess√°rio estimar, tamb√©m, o valor de todo volume do servi√ßo a ser realizado.
Para chegar ao valor estimado, foi utilizada a minuta de instru√ß√£o normativa de refer√™ncia SEI/INCRA ‚Äì 20411255, dentro do sistema SEI.
Esta minuta estabelece crit√©rios e par√¢metros de c√°lculos para pre√ßos referenciais para execu√ß√£o de servi√ßos geod√©sicos/cartogr√°ficos, para medi√ß√£o e demarca√ß√£o de im√≥veis rurais em √°reas sob jurisdi√ß√£o do INCRA.
A Tabela de Classifica√ß√£o estabelece, na minuta de Portaria, os crit√©rios de pontua√ß√£o para posterior compara√ß√£o a tabela de Rendimento e Pre√ßo."\n

A presente entrega tem como resultado um arquivo em formato GeoPackage (.gpkg), contendo os valores discriminados de cada crit√©rio estabelecido na minuta, bem como os valores calculados para cada munic√≠pio. A precifica√ß√£o foi feita de acordo com a minuta de instru√ß√£o normativa de refer√™ncia SEI/INCRA ‚Äì 20411255, dispon√≠vel para download no fim da p√°gina. A produ√ß√£o dos dados foi realizada em banco de dados espacial PostGIS e em ambiente Python 3.12, visando garantir controle e reprodutibilidade dos resultados.
Os resultados aqui apresentados correspondem √† entrega piloto para o estado de Alagoas, contemplando os crit√©rios de Vegeta√ß√£o, Relevo, Insalubridade, Clima, √Årea e Acesso.\n

**Dados Utilizados**\n
Os dados utilizados para a composi√ß√£o da nota final foram obtidos a partir de APIs e plataformas online como DataSUS, Google Earth Engine (GEE), MapBiomas, BigQuery/INMET, entre outras.\n
**Crit√©rios e Fontes**\n
**-Vegeta√ß√£o**\n
Os dados de vegeta√ß√£o foram obtidos na plataforma MapBiomas, sendo a nota por munic√≠pio calculada com base na vegeta√ß√£o predominante e na vegeta√ß√£o m√©dia.
Fonte: MapBiomas ‚Äì Cole√ß√£o 2 (beta) de Mapas Anuais de Cobertura e Uso da Terra do Brasil (10m de resolu√ß√£o espacial).
Link: Mapbiomas - https://brasil.mapbiomas.org/mapbiomas-cobertura-10m/.\n
**-Insalubridade**\n
Os dados de insalubridade foram obtidos na plataforma DataSUS, considerando as ocorr√™ncias de dengue registradas entre 2024 e 2025. As notas foram atribu√≠das a partir da distribui√ß√£o entre valores m√°ximos e m√≠nimos observados.
Al√©m disso, foi proposta a inclus√£o de uma nova m√©trica, tamb√©m oriunda do DataSUS, referente a ocorr√™ncia de acidentes com animais pe√ßonhentos, visando maior coer√™ncia com o contexto de trabalho de campo. Para essa m√©trica foi criado o campo insalub_2, no qual a distribui√ß√£o apresentou comportamento mais pr√≥ximo de uma normal em compara√ß√£o ao uso exclusivo da dengue.
Fonte: DataSUS ‚Äì Transfer√™ncia de Arquivos - https://datasus.saude.gov.br/transferencia-de-arquivos/#.\n
**-Relevo**\n
O relevo foi classificado a partir de dados raster do Modelo Digital de Eleva√ß√£o SRTM (30m), obtidos via API do Google Earth Engine (GEE). Com base nos dados de altitude, foi calculada a inclina√ß√£o do terreno, posteriormente classificada segundo a tipologia de Lepsch (1983). As notas foram atribu√≠das considerando a classe predominante de relevo e a m√©dia das classes.
Fonte: USGS SRTM 30m ‚Äì Google Earth Engine
Link: https://developers.google.com/earth-engine/datasets/catalog/USGS_SRTMGL1_003?hl=pt-br.\n
**-Clima**\n
Os dados de clima foram obtidos por meio da plataforma BigQuery do INMET, aplicando-se krigagem ordin√°ria sobre s√©ries hist√≥ricas de esta√ß√µes meteorol√≥gicas brasileiras dos √∫ltimos 25 anos. As notas foram atribu√≠das com base na distribui√ß√£o de temperaturas m√°ximas e m√≠nimas.
Prop√µe-se ainda a atribui√ß√£o de notas por trimestre, permitindo expressar com maior precis√£o a sazonalidade da pluviosidade.
Exemplo de implementa√ß√£o da krigagem:\n
OK = OrdinaryKriging(
x, y, z,
variogram_model='spherical',
verbose=False,
enable_plotting=False
)\n
Fonte: BigQuery - https://console.cloud.google.com/bigquery?p=basedosdados.\n
**-√Årea**\n
A nota referente √† √°rea m√©dia de lotes foi calculada a partir da m√©dia das √°reas dos assentamentos do CAR que se encontram total ou parcialmente dentro de cada munic√≠pio, de modo a reduzir desvios estat√≠sticos nas m√©dias.
Fonte: Base de dados Zetta.\n
**-Acesso**\n
Para este crit√©rio, foi atribu√≠da nota √∫nica (1) a todos os munic√≠pios, uma vez que todos possuem acesso por vias rodovi√°rias.\n
**- Auxiliares**\n
Shapefile de munic√≠pios do Brasil e estimativa populacional por munic√≠pio. Fonte: IBGE. \n
Dados fundi√°rios e territoriais (CAR, SIGEF, Terras da Uni√£o, UCs, TIs). Fonte: Base de dados Zetta.\n
**Dicion√°rio de dados**\n

**CD_MUN**: C√≥digo do munic√≠pio (IBGE).
**NM_MUN**: Nome do munic√≠pio (IBGE).
**SIGLA_UF**: Sigla da unidade federativa (IBGE).
**ckey**: Chave composta contendo nome + unidade federativa do munic√≠pio.
**populacao**: Numero de indiv√≠duos residentes no munic√≠pio segundo estimativa do IBGE.
**geometry**: Coluna de geometrias.
**nota_veg**: Nota relativa √† vegeta√ß√£o do local. Calculada de acordo com classe
predominante no munic√≠pio (aberta, intermedi√°ria e fechada) e nota espec√≠fica com m√©dia de ocorr√™ncia de classe no intervalo.
**nota_area**: Nota relativa √† √°rea m√©dia de Lotes CAR na √°rea do munic√≠pio (Acima de 35ha, acima de 15 at√© 35 ha, at√© 15 ha), atribuindo-se as notas em cada intervalo de acordo com m√°ximas e m√≠nimas.
**nota relevo**: Nota relativa ao relevo predominante no munic√≠pio.
**nota_p_qx**: Notas relativas √† quantidade de precipita√ß√£o no munic√≠pio por trimestre (..._q1, ..._q2, ..._q3, ..._q4). Notas distribu√≠das de acordo com m√°ximas e m√≠nimas gerais.
**nota_insalub**: Nota relativa √† insalubridade (casos de dengue por munic√≠pio). Notas distribu√≠das de acordo com m√°ximas e m√≠nimas gerais.
**nota_insalub2**: Nota relativa √† insalubridade ajustada, incluindo-se incid√™ncia de ataque de animais pe√ßonhentos. Notas distribu√≠das de acordo com m√°ximas e m√≠nimas gerais.
**area_cidade**: √Årea total do munic√≠pio.
**area_georef**: √Årea total georreferenci√°vel do munic√≠pio, excluindo-se: Terras ind√≠genas, Terras da Uni√£o, Unidades de Conserva√ß√£o, SIGEF.
**percent_area_georef**: Percentual de √°rea georreferenci√°vel em rela√ß√£o √† √°rea do munic√≠pio.
**num_imoveis**: N√∫mero de im√≥veis do CAR presentes no munic√≠pio.
**area_car_total**: √Årea total de im√≥veis CAR no munic√≠pio.
**area_car_media**: √Årea m√©dia de im√≥veis CAR no munic√≠pio.
**perimetro_total_car**: Per√≠metro somado de todos os im√≥veis CAR no munic√≠pio.
**perimetro_medio_car**: Per√≠metro m√©dio de im√≥veis CAR no munic√≠pio.
**area_max_perim**: √Årea m√°xima alcan√ß√°vel de acordo com per√≠metro m√©dio. Serve para avaliar a rela√ß√£o m√©dia entre per√≠metro e √°rea dos im√≥veis do munic√≠pio.
**nota_total_qx**: Nota total somada para o trimestre 'x' (...q1, ...q2, etc)
**nota_media**: M√©dia das notas utilizada para composi√ß√£o do valor final.
**valor_mun_perim**: Valor total do munic√≠pio em rela√ß√£o ao per√≠metro total de im√≥veis car, utilizando-se os dados do Quadro II - Tabela de Rendimento e Pre√ßo do Anexo I da Instru√ß√£o Normativa Minuta SEI/INCRA.
**valor_mun_area**: Valor total do munic√≠pio em rela√ß√£o √† √°rea georreferenci√°vel. </p>
    """, unsafe_allow_html=True)

        url = "https://raw.githubusercontent.com/victor-arantes/mda-app/main/dados/mi_normref_incra_20411255.pdf"
        st.markdown('''
    **Downloads**''')
        st.markdown(f'[üìëMinuta de Instru√ß√£o Normativa de Refer√™ncia SEI/INCRA ‚Äì 20411255]({url})')
    
    # Aba Mapa (√≠ndice 0)
    with abas[0]:
        # Verificar se h√° munic√≠pio destacado no session_state
        municipio_clicado_alt = None
        nome_municipio_clicado = None
        
        # Criar mapa
        m = criar_mapa(gdf_filtrado, criterio_sel, mostrar_controle_camadas=True)
        
        # Se h√° munic√≠pio destacado no session_state, adicionar borda vermelha
        if 'municipio_destacado' in st.session_state and st.session_state.municipio_destacado:
            try:
                import folium
                # Encontrar o munic√≠pio no gdf_filtrado
                if 'mun_nome' in gdf_filtrado.columns:
                    municipio_row = gdf_filtrado[gdf_filtrado['mun_nome'] == st.session_state.municipio_destacado]
                else:
                    municipio_row = gdf_filtrado[gdf_filtrado['NM_MUN'] == st.session_state.municipio_destacado]
                
                if len(municipio_row) > 0:
                    municipio_clicado_alt = municipio_row.iloc[0]
                    # Adicionar pol√≠gono de destaque com borda vermelha grossa
                    folium.GeoJson(
                        municipio_clicado_alt['geometry'],
                        style_function=lambda x: {
                            'fillColor': 'transparent',
                            'color': '#FF0000',
                            'weight': 5,
                            'fillOpacity': 0,
                            'dashArray': '10, 5'
                        },
                        name="destaque"
                    ).add_to(m)
            except:
                pass
        
        from streamlit_folium import st_folium
        map_data_alt = st_folium(
            m, 
            width=None, 
            height=500, 
            returned_objects=["last_object_clicked"],
            key=f"mapa_alternativa_{len(gdf_filtrado)}_{criterio_sel}"
        )
        
        st.markdown("---")
        
        # Verificar se h√° munic√≠pio clicado
        if map_data_alt and map_data_alt.get("last_object_clicked"):
            clicked_data = map_data_alt["last_object_clicked"]
            if clicked_data:
                try:
                    from shapely.geometry import Point
                    clicked_point = Point(clicked_data.get("lng", 0), clicked_data.get("lat", 0))
                    for idx, row in gdf_filtrado.iterrows():
                        if row['geometry'].contains(clicked_point):
                            nome_municipio_clicado = row.get('mun_nome', row['NM_MUN'])
                            
                            # Verificar se √© um NOVO clique (diferente do anterior)
                            ultimo_clique = st.session_state.get('ultimo_municipio_clicado', None)
                            if ultimo_clique != nome_municipio_clicado:
                                # √â um novo clique - salvar e recarregar
                                st.session_state.municipio_selecionado_mapa = nome_municipio_clicado
                                st.session_state.municipio_destacado = nome_municipio_clicado
                                st.session_state.ultimo_municipio_clicado = nome_municipio_clicado
                                st.rerun()
                            else:
                                # Mesmo munic√≠pio - apenas atualizar a vari√°vel local
                                municipio_clicado_alt = row
                            break
                except:
                    pass
        
        # Se houver munic√≠pio clicado, usar seus dados; sen√£o, usar dados agregados
        if municipio_clicado_alt is not None:
            # Usar mun_nome se dispon√≠vel
            nome_municipio = municipio_clicado_alt.get('mun_nome', municipio_clicado_alt['NM_MUN'])
            st.markdown(f"### üìä Estat√≠sticas - {nome_municipio}")
        else:
            st.markdown("### üìä Estat√≠sticas")
        
        # Linha 1: Informa√ß√µes Gerais
        col1, col2, col3, col4 = st.columns(4)
        
        if municipio_clicado_alt is not None:
            # Dados do munic√≠pio clicado
            col1.metric("Munic√≠pio", municipio_clicado_alt.get('mun_nome', municipio_clicado_alt['NM_MUN']))
            col2.metric("Nota M√©dia", f"{municipio_clicado_alt['nota_media']:.2f}")
            
            if 'area_georef' in municipio_clicado_alt:
                area_fmt = f"{municipio_clicado_alt['area_georef']:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col3.metric("√Årea (ha)", area_fmt)
            
            if 'perimetro_total_car' in municipio_clicado_alt:
                perimetro_fmt = f"{municipio_clicado_alt['perimetro_total_car']:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col4.metric("Per√≠metro (km)", perimetro_fmt)
        else:
            # Dados agregados
            col1.metric("Munic√≠pios", len(gdf_filtrado))
            col2.metric("Nota M√©dia", f"{gdf_filtrado['nota_media'].mean():.2f}")
        
        
        if municipio_clicado_alt is None:
            # Dados agregados - s√≥ mostrar quando n√£o h√° munic√≠pio clicado
            if 'area_georef' in gdf_filtrado.columns:
                area_total = gdf_filtrado['area_georef'].sum()
                area_fmt = f"{area_total:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col3.metric("√Årea Total (ha)", area_fmt)
            
            if 'perimetro_total_car' in gdf_filtrado.columns:
                perimetro_total = gdf_filtrado['perimetro_total_car'].sum()
                perimetro_fmt = f"{perimetro_total:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col4.metric("Per√≠metro Total (km)", perimetro_fmt)
        
        # Linha 2: Valores
        col1, col2, col3, col4 = st.columns(4)
        
        if municipio_clicado_alt is not None:
            # Dados do munic√≠pio clicado
            if 'valor_mun_area' in municipio_clicado_alt:
                valor_area_fmt = f"R$ {municipio_clicado_alt['valor_mun_area']:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col1.metric("Valor - √Årea", valor_area_fmt)
            
            if 'valor_mun_perim' in municipio_clicado_alt:
                valor_perim_fmt = f"R$ {municipio_clicado_alt['valor_mun_perim']:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col2.metric("Valor - Per√≠metro", valor_perim_fmt)
            
            # Valor por hectare
            if 'valor_mun_area' in municipio_clicado_alt and 'area_georef' in municipio_clicado_alt:
                if municipio_clicado_alt['area_georef'] > 0:
                    valor_ha = municipio_clicado_alt['valor_mun_area'] / municipio_clicado_alt['area_georef']
                    valor_ha_fmt = f"R$ {valor_ha:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    col3.metric("Valor/ha", valor_ha_fmt)
            
            # Valor por quil√¥metro
            if 'valor_mun_perim' in municipio_clicado_alt and 'perimetro_total_car' in municipio_clicado_alt:
                if municipio_clicado_alt['perimetro_total_car'] > 0:
                    valor_km = municipio_clicado_alt['valor_mun_perim'] / municipio_clicado_alt['perimetro_total_car']
                    valor_km_fmt = f"R$ {valor_km:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    col4.metric("Valor/km", valor_km_fmt)
        else:
            # Dados agregados
            if 'valor_mun_area' in gdf_filtrado.columns:
                valor_area = gdf_filtrado['valor_mun_area'].sum()
                valor_area_fmt = f"R$ {valor_area:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col1.metric("Valor Total - √Årea", valor_area_fmt)
            
            if 'valor_mun_perim' in gdf_filtrado.columns:
                valor_perim = gdf_filtrado['valor_mun_perim'].sum()
                valor_perim_fmt = f"R$ {valor_perim:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col2.metric("Valor Total - Per√≠metro", valor_perim_fmt)
            
            # Valor m√©dio por hectare
            if 'valor_mun_area' in gdf_filtrado.columns and 'area_georef' in gdf_filtrado.columns:
                area_total = gdf_filtrado['area_georef'].sum()
                if area_total > 0:
                    valor_medio_ha = gdf_filtrado['valor_mun_area'].sum() / area_total
                    valor_medio_ha_fmt = f"R$ {valor_medio_ha:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    col3.metric("Valor M√©dio/ha", valor_medio_ha_fmt)
            
            # Valor m√©dio por quil√¥metro
            if 'valor_mun_perim' in gdf_filtrado.columns and 'perimetro_total_car' in gdf_filtrado.columns:
                perimetro_total = gdf_filtrado['perimetro_total_car'].sum()
                if perimetro_total > 0:
                    valor_medio_km = gdf_filtrado['valor_mun_perim'].sum() / perimetro_total
                    valor_medio_km_fmt = f"R$ {valor_medio_km:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    col4.metric("Valor M√©dio/km", valor_medio_km_fmt)
        
        # Linha 3: Tamanhos M√©dios
        col1, col2, col3, col4 = st.columns(4)
        
        if municipio_clicado_alt is not None:
            # Dados do munic√≠pio clicado
            if 'area_car_media' in municipio_clicado_alt:
                tamanho_fmt = f"{municipio_clicado_alt['area_car_media']:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col1.metric("Tamanho M√©dio Im√≥vel (ha)", tamanho_fmt)
            
            if 'perimetro_medio_car' in municipio_clicado_alt:
                perimetro_medio_fmt = f"{municipio_clicado_alt['perimetro_medio_car']:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col2.metric("Per√≠metro M√©dio Im√≥vel (km)", perimetro_medio_fmt)
            
            # Para munic√≠pio individual, n√£o mostrar Min/Max (s√£o os mesmos valores)
            if 'valor_mun_area' in municipio_clicado_alt and 'area_georef' in municipio_clicado_alt:
                if municipio_clicado_alt['area_georef'] > 0:
                    valor_ha = municipio_clicado_alt['valor_mun_area'] / municipio_clicado_alt['area_georef']
                    valor_fmt = f"R$ {valor_ha:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    col3.metric("Valor/ha", valor_fmt)
        else:
            # Dados agregados
            if 'area_car_media' in gdf_filtrado.columns:
                tamanho_medio = gdf_filtrado['area_car_media'].mean()
                tamanho_fmt = f"{tamanho_medio:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col1.metric("Tamanho M√©dio Im√≥vel (ha)", tamanho_fmt)
            
            if 'perimetro_medio_car' in gdf_filtrado.columns:
                perimetro_medio = gdf_filtrado['perimetro_medio_car'].mean()
                perimetro_medio_fmt = f"{perimetro_medio:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                col2.metric("Per√≠metro M√©dio Im√≥vel (km)", perimetro_medio_fmt)
            
            # Valores Min/Max por hectare
            if 'valor_mun_area' in gdf_filtrado.columns and 'area_georef' in gdf_filtrado.columns:
                gdf_temp = gdf_filtrado[gdf_filtrado['area_georef'] > 0].copy()
                if len(gdf_temp) > 0:
                    gdf_temp['valor_por_ha'] = gdf_temp['valor_mun_area'] / gdf_temp['area_georef']
                    
                    valor_min = gdf_temp['valor_por_ha'].min()
                    valor_min_fmt = f"R$ {valor_min:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    col3.metric("Valor M√≠n/ha", valor_min_fmt)
                    
                    valor_max = gdf_temp['valor_por_ha'].max()
                    valor_max_fmt = f"R$ {valor_max:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    col4.metric("Valor M√°x/ha", valor_max_fmt)
        
        st.markdown("---")
        
        # Gr√°ficos antes da tabela
        col_grafico1, col_grafico2 = st.columns(2)
        
        with col_grafico1:
            st.markdown("#### üìä Notas por Trimestre")
            # Se houver munic√≠pio clicado, mostrar dados dele; sen√£o, m√©dias gerais
            if municipio_clicado_alt is not None:
                import plotly.graph_objects as go
                
                trimestres = ['Q1', 'Q2', 'Q3', 'Q4']
                valores = [
                    municipio_clicado_alt.get('nota_total_q1', 0),
                    municipio_clicado_alt.get('nota_total_q2', 0),
                    municipio_clicado_alt.get('nota_total_q3', 0),
                    municipio_clicado_alt.get('nota_total_q4', 0)
                ]
                
                fig_barras = go.Figure(data=[
                    go.Bar(
                        x=trimestres, 
                        y=valores,
                        marker_color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],
                        text=[f'{v:.2f}' for v in valores],
                        textposition='auto',
                    )
                ])
                
                fig_barras.update_layout(
                    yaxis_title='Nota Total',
                    xaxis_title='Trimestre',
                    height=300,
                    showlegend=False,
                    margin=dict(l=40, r=40, t=40, b=40)
                )
                
                st.plotly_chart(fig_barras, use_container_width=True)
            else:
                # Mostrar m√©dias gerais
                import plotly.graph_objects as go
                
                trimestres = ['Q1', 'Q2', 'Q3', 'Q4']
                valores = [
                    gdf_filtrado['nota_total_q1'].mean() if 'nota_total_q1' in gdf_filtrado.columns else 0,
                    gdf_filtrado['nota_total_q2'].mean() if 'nota_total_q2' in gdf_filtrado.columns else 0,
                    gdf_filtrado['nota_total_q3'].mean() if 'nota_total_q3' in gdf_filtrado.columns else 0,
                    gdf_filtrado['nota_total_q4'].mean() if 'nota_total_q4' in gdf_filtrado.columns else 0
                ]
                
                fig_barras = go.Figure(data=[
                    go.Bar(
                        x=trimestres, 
                        y=valores,
                        marker_color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],
                        text=[f'{v:.2f}' for v in valores],
                        textposition='auto',
                    )
                ])
                
                fig_barras.update_layout(
                    yaxis_title='Nota Total (M√©dia)',
                    xaxis_title='Trimestre',
                    height=300,
                    showlegend=False,
                    margin=dict(l=40, r=40, t=40, b=40)
                )
                
                st.plotly_chart(fig_barras, use_container_width=True)
        
        with col_grafico2:
            st.markdown("#### üìè Percentagem √Årea Georref")
            
            # Calcular percentagem de √°rea georreferenci√°vel da coluna percent_area_georef
            if municipio_clicado_alt is not None:
                # Para munic√≠pio individual - usar a coluna percent_area_georef
                if 'percent_area_georef' in municipio_clicado_alt:
                    percentual = float(municipio_clicado_alt['percent_area_georef'])
                else:
                    percentual = 0.0
            else:
                # Para agregado - m√©dia dos percentuais
                if 'percent_area_georef' in gdf_filtrado.columns:
                    percentual = float(gdf_filtrado['percent_area_georef'].mean())
                else:
                    percentual = 0.0
            
            import plotly.graph_objects as go
            
            fig_gauge = go.Figure(go.Indicator(
                mode="gauge+number",
                value=percentual,
                domain={'x': [0, 1], 'y': [0, 1]},
                number={'suffix': "%", 'font': {'size': 40}},
                gauge={
                    'axis': {'range': [0, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
                    'bar': {'color': "rgba(0,0,0,0)"},  # Barra invis√≠vel
                    'bgcolor': "white",
                    'borderwidth': 2,
                    'bordercolor': "gray",
                    'steps': [
                        {'range': [0, 25], 'color': '#27ae60'},      # Verde escuro
                        {'range': [25, 50], 'color': '#2ecc71'},     # Verde claro
                        {'range': [50, 75], 'color': '#f1c40f'},     # Amarelo
                        {'range': [75, 90], 'color': '#e67e22'},     # Laranja
                        {'range': [90, 100], 'color': '#e74c3c'}     # Vermelho
                    ],
                    'threshold': {
                        'line': {'color': "darkblue", 'width': 4},
                        'thickness': 0.75,
                        'value': percentual
                    }
                }
            ))
            
            fig_gauge.update_layout(
                height=300,
                margin=dict(l=20, r=20, t=40, b=20)
            )
            
            st.plotly_chart(fig_gauge, use_container_width=True)
        
        st.markdown("---")
        
        # Tabela de Munic√≠pios
        st.markdown("### üìÑ Tabela de Munic√≠pios")
        colunas_excluir = ["geometry"]
        if "fid" in gdf_filtrado.columns:
            colunas_excluir.append("fid")
        st.dataframe(gdf_filtrado.drop(columns=colunas_excluir), use_container_width=True)


if __name__ == "__main__":
    main()



if __name__ == "__main__":
    main()